#+TITLE: Emacs Config
#+AUTHOR: Zach Dodge

#+begin_src elisp
(setq user-full-name "Zachary Dodge"
      user-mail-address "zacharysdodge@gmail.com")
#+end_src

#+begin_src elisp
(setq doom-theme 'doom-material-dark)
(setq doom-font (font-spec :family "Hack Nerd Font Mono" :size 16))
#+end_src

- Tell projectile to only search non-gitignored files
- Blink the cursor
- Don't require confirmation to exit emacs
- Disable scroll wheel "acceleration"
#+begin_src elisp
(setq projectile-indexing-method 'alien)
(blink-cursor-mode t)
(setq confirm-kill-emacs nil)
(setq mouse-wheel-progressive-speed nil)
#+end_src

Enable line numbers except in a few modes.
#+begin_src elisp
(global-display-line-numbers-mode)
(dolist (mode '(vterm-mode-hook
                eshell-mode-hook
                org-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

Set js/ts/web indent levels to two spaces.
#+begin_src elisp
(setq js-indent-level 2
      typescript-indent-level 2)
(setq web-mode-code-indent-offset 2
      web-mode-markup-indent-offset 2
      web-mode-css-indent-offset 2)
#+end_src

- Use delta mode in magit
#+begin_src elisp
; Performance isn't great: https://github.com/dandavison/magit-delta/issues/9
(use-package! magit-delta
  :hook (magit-mode . magit-delta-mode))
#+end_src

- Make escape quit (instead of triple escape)
- Make home and end relative to single lines
- Add comment line shortcut
- SPC e as eval-last-sexp
- Setup arrow keys for window navigation
#+begin_src elisp
(map! "<escape>" #'keyboard-escape-quit)
(map! "<home>" #'beginning-of-line)
(map! "<end>" #'end-of-line)
(map! :leader "e" #'eval-last-sexp)
(map! :leader :desc "M-x" "SPC" #'execute-extended-command)
(map! :leader (:prefix "w"
               :desc "evil-window-left" "<left>" #'evil-window-left
               :desc "evil-window-down" "<down>" #'evil-window-down
               :desc "evil-window-up" "<up>" #'evil-window-up
               :desc "evil-window-right" "<right>" #'evil-window-right))
#+end_src

Default Emacs to maximized.
#+begin_src elisp
(setq initial-frame-alist '((fullscreen . maximized)))
#+end_src

Trigger avy commands on SPC-j.
#+begin_src elisp
(map! :leader (:prefix ("j" . "avy")
               :desc "char" "c" #'evil-avy-goto-char
               :desc "line" "l" #'evil-avy-goto-line
               :desc "word" "w" #'evil-avy-goto-word-0))
#+end_src

When on Windows, change the default directory for faster indexing.
#+begin_src elisp
(when IS-WINDOWS (setq default-directory doom-private-dir))
#+end_src

Setup undo tree with keybindings.
#+begin_src elisp
(after! undo-tree
  (setq undo-tree-auto-save-history nil))
(map! :after undo-tree
      :leader (:prefix-map ("u" . "undo")
               :desc "redo" "r" #'undo-tree-redo
               :desc "undo" "u" #'undo-tree-undo
               :desc "visualize" "v" #'undo-tree-visualize))
#+end_src

Setup org and org agenda.
#+begin_src elisp
(after! org
  (setq org-directory "~/org")
  (setq org-agenda-files (directory-files-recursively "~/org" "\\.org$"))
  (setq org-log-done 'time))
#+end_src

Modify highlight indent to use block characters instead of just vertical pipes.
#+begin_src elisp
(use-package! highlight-indent-guides
  :config
  (setq highlight-indent-guides-method 'column))
#+end_src

Setup projectile-ripgrep as "SPC-/"
#+begin_src elisp
(use-package! rg)
(map! :after projectile :leader "/"
      #'(lambda ()
          (interactive)
          (let ((shell-file-name "/bin/sh")) (call-interactively #'projectile-ripgrep))))
#+end_src

#+begin_src elisp
(map! :mode lisp-mode :n "SPC E" #'sly-pprint-eval-last-expression)
#+end_src

Setup re-builder and query-replace-regexp to work together.
Source: https://karthinks.com/software/bridging-islands-in-emacs-1/
#+begin_src elisp
(defvar my/re-builder-positions nil
  "Store point and region bounds before calling re-builder")
(advice-add 're-builder
            :before
            (defun my/re-builder-save-state (&rest _)
              "Save into `my/re-builder-positions' the point and region
positions before calling `re-builder'."
              (setq my/re-builder-positions
                    (cons (point)
                          (when (region-active-p)
                            (list (region-beginning)
                                  (region-end)))))))

(defun reb-replace-regexp (&optional delimited)
  "Run `query-replace-regexp' with the contents of re-builder. With
non-nil optional argument DELIMITED, only replace matches
surrounded by word boundaries."
  (interactive "P")
  (reb-update-regexp)
  (let* ((re (reb-target-binding reb-regexp))
         (replacement (query-replace-read-to
                       re
                       (concat "Query replace"
                               (if current-prefix-arg
                                   (if (eq current-prefix-arg '-) " backward" " word")
                                 "")
                               " regexp"
                               (if (with-selected-window reb-target-window
                                     (region-active-p)) " in region" ""))
                       t))
         (pnt (car my/re-builder-positions))
         (beg (cadr my/re-builder-positions))
         (end (caddr my/re-builder-positions)))
    (with-selected-window reb-target-window
      (goto-char pnt) ; replace with (goto-char (match-beginning 0)) if you want
                                        ; to control where in the buffer the replacement starts
                                        ; with re-builder
      (setq my/re-builder-positions nil)
      (reb-quit)
      (query-replace-regexp re replacement delimited beg end))))
(use-package! re-builder
  :bind (:map doom-leader-map ("r" . re-builder))
  :hook ((reb-lisp-mode . centaur-tabs-local-mode)
         (reb-lisp-mode . hide-mode-line-mode))
  :custom
  (reb-re-syntax 'string)
  :config
  (map! :map reb-mode-map :n "RET" #'reb-replace-regexp)
  (map! :map reb-mode-map :n "<escape>" #'reb-quit))
#+end_src

Setup eshell to use ansi color codes.
#+begin_src elisp
(defun eshell-prompt ()
  (setenv "TERM" "xterm-256color")
  (ansi-color-apply (shell-command-to-string "starship prompt")))
(after! eshell
  (setenv "TERM" "xterm-256color")
  (setq eshell-prompt-function #'eshell-prompt)
  (setq eshell-highlight-prompt nil))
#+end_src

#+begin_src elisp
(remove-hook 'doom-first-input-hook #'evil-snipe-mode)
(map! :map evil-normal-state-map
      (:prefix-map ("s" . "smart-parens")
       :desc "sp-forward-sexp" "f" #'sp-forward-parallel-sexp
       :desc "sp-backward-sexp" "b" #'sp-backward-parallel-sexp
       :desc "sp-up-sexp" "u" #'sp-up-sexp
       :desc "sp-down-sexp" "d" #'sp-down-sexp))
#+end_src

Allow crossing beginning and end of lines with horizontal movements.
Setup page up/down as evil-scroll-up/down.
#+begin_src elisp
(after! evil
  (setq evil-cross-lines t)
  (map! "<next>" #'evil-scroll-down)
  (map! "<prior>" #'evil-scroll-up))
#+end_src

Use roswell for lisp.
#+begin_src elisp
(setq inferior-lisp-program "ros -Q run")
#+end_src

Load a work config file if it exists.
#+begin_src elisp
(let ((work-config (doom-dir doom-private-dir "+work-config.el")))
  (when (file-exists-p work-config)
    (load! "+work-config.el")))
#+end_src
