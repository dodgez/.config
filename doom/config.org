#+TITLE: Emacs Config
#+AUTHOR: Zach Dodge

#+begin_src elisp
(setq user-full-name "Zachary Dodge"
      user-mail-address "zacharysdodge@gmail.com")
#+end_src

#+begin_src elisp
(setq doom-theme 'doom-monokai-machine)
(setq doom-font (font-spec :family "Hack Nerd Font Mono" :size 16))
#+end_src

#+begin_src elisp
(setq org-support-shift-select t)
#+end_src

- Tell projectile to only search non-gitignored files
- Blink the cursor
- Don't require confirmation to exit emacs
- Disable scroll wheel "acceleration"
#+begin_src elisp
(setq projectile-indexing-method 'alien)
(blink-cursor-mode t)
(setq confirm-kill-emacs nil)
(setq mouse-wheel-progressive-speed nil)
#+end_src

Enable line numbers except in a few modes.
#+begin_src elisp
(global-display-line-numbers-mode)
(dolist (mode '(vterm-mode-hook
                eshell-mode-hook
                org-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

Set js/ts/web indent levels to two spaces.
#+begin_src elisp
(setq js-indent-level 2
      typescript-indent-level 2)
(setq web-mode-code-indent-offset 2
      web-mode-markup-indent-offset 2
      web-mode-css-indent-offset 2)
#+end_src

- Use delta mode in magit
#+begin_src elisp
; Performance isn't great: https://github.com/dandavison/magit-delta/issues/9
;(use-package! magit-delta
;  :hook (magit-mode . magit-delta-mode))
#+end_src

- Make escape quit (instead of triple escape)
- Make home and end relative to single lines
- Add comment line shortcut
- SPC e as eval-last-sexp
- Setup arrow keys for window navigation
#+begin_src elisp
(map! "<escape>" #'keyboard-escape-quit)
(map! "<home>" #'beginning-of-line)
(map! "<end>" #'end-of-line)
(map! :leader "e" #'eval-last-sexp)
(map! :leader :desc "M-x" "SPC" #'execute-extended-command)
(map! :leader (:prefix "w"
               :desc "evil-window-left" "<left>" #'evil-window-left
               :desc "evil-window-down" "<down>" #'evil-window-down
               :desc "evil-window-up" "<up>" #'evil-window-up
               :desc "evil-window-right" "<right>" #'evil-window-right))
#+end_src

Size the frame to be proportional to the display.
The default proportion is 0.8 of width and height.
The first parameter of workarea is simultaneously the display's offset from the left and padding from the window manager.
Therefore, if the number is too high (like 1920), treat it as 0 for calculating frame width but use it to position correctly.
#+begin_src elisp
(defun set-ideal-frame-size (&optional proportion)
  (interactive)
  (when (display-graphic-p)
    (pcase (frame-monitor-workarea)
      (`(,display-x ,display-y ,display-raw-width ,display-raw-height)
       (let* ((proportion (or proportion 0.9))
              (margin (/ (- 1 proportion) 2))
              (display-width (- display-raw-width (if (< display-x 1920) display-x 0)))
              (display-height (- display-raw-height display-y))
              (width (truncate (* display-width proportion)))
              (height (truncate (* display-height proportion)))
              (margin-left (+ display-x (truncate (* display-width margin))))
              (margin-top (+ display-y (truncate (* display-height margin)))))
         (set-frame-position (selected-frame) margin-left margin-top)
         (set-frame-size (selected-frame) width height t))))))
(map! :leader
      :desc "Set ideal frame size" "F" #'set-ideal-frame-size)
(setq initial-frame-alist '((fullscreen . maximized)))
#+end_src

Use swiper instead of isearch.
Trigger avy commands on SPC-j.
#+begin_src elisp
(map! "C-s" #'swiper)
(map! :after avy
      :leader (:prefix ("j" . "avy")
               :desc "char" "c" #'evil-avy-goto-char
               :desc "line" "l" #'evil-avy-goto-line
               :desc "word" "w" #'evil-avy-goto-word-0))
#+end_src

When on Windows, change the default directory for faster indexing.
#+begin_src elisp
(when IS-WINDOWS (setq default-directory doom-private-dir))
#+end_src

Setup undo tree with keybindings.
#+begin_src elisp
(after! undo-tree
  (setq undo-tree-auto-save-history nil))
(map! :after undo-tree
      :leader (:prefix ("U" . "undo")
               :desc "redo" "r" #'undo-tree-redo
               :desc "undo" "u" #'undo-tree-undo
               :desc "visualize" "v" #'undo-tree-visualize))
#+end_src

Setup org and org agenda.
#+begin_src elisp
(after! org
  (setq org-directory "~/org")
  (setq org-agenda-files (directory-files-recursively "~/org" "\\.org$"))
  (setq org-log-done 'time))
#+end_src

Modify highlight indent to use block characters instead of just vertical pipes.
#+begin_src elisp
(use-package! highlight-indent-guides
  :config
  (setq highlight-indent-guides-method 'column))
#+end_src

Setup projectile-ripgrep as "SPC-/"
#+begin_src elisp
(use-package! rg)
(map! :after projectile :leader "/"
      #'(lambda ()
          (interactive)
          (let ((shell-file-name "/bin/sh")) (call-interactively #'projectile-ripgrep))))
#+end_src

Load a work config file if it exists.
#+begin_src elisp
(let ((work-config (doom-dir doom-private-dir "+work-config.el")))
  (when (file-exists-p work-config)
    (load! "+work-config.el")))
#+end_src
