#+TITLE: Emacs Config
#+AUTHOR: Zach Dodge

#+begin_src elisp
(setq user-full-name "Zachary Dodge"
      user-mail-address "zacharysdodge@gmail.com")
#+end_src

#+RESULTS:
: zacharysdodge@gmail.com

#+begin_src elisp
(setq doom-theme 'doom-dracula)
(setq doom-font (font-spec :family "Hack Nerd Font Mono" :size 16))
#+end_src

#+RESULTS:
: #<font-spec nil nil Hack\ Nerd\ Font\ Mono nil nil nil nil nil 16 nil nil nil nil>

#+begin_src elisp
(setq org-support-shift-select t)
#+end_src

#+RESULTS:
: t

- Display (absolute) line numbers
- Tell projectile to only search non-gitignored files
- Blink the cursor
- Don't require confirmation to exit emacs
- Disable scroll wheel "acceleration"
#+begin_src elisp
(setq display-line-numbers-type t)
(setq projectile-indexing-method 'alien)
(blink-cursor-mode)
(setq confirm-kill-emacs nil)
(setq mouse-wheel-progressive-speed nil)
#+end_src

#+RESULTS:

- Centaur-tabs causes issues on my home computer
- Use delta mode in magit
#+begin_src elisp
(defun custom-centaur-tabs-buffer-groups ()
  (list
   (cond
    ((string-equal "*" (substring (buffer-name) 0 1)) "Emacs")
    (t "User"))))
(when (not (string-equal system-type "windows-nt"))
  (use-package! centaur-tabs
    :config
    (setq centaur-tabs-buffer-groups-function #'custom-centaur-tabs-buffer-groups)))
(use-package! magit-delta
  :hook (magit-mode . magit-delta-mode))
#+end_src

#+RESULTS:
| (closure ((hook . magit-mode-hook) (--dolist-tail--) t) (&rest _) (progn (defalias '+magit-enlargen-fringe-h #'(lambda nil Make fringe larger in magit. (and (display-graphic-p) (derived-mode-p 'magit-mode) +magit-fringe-size (let ((left (or (car-safe +magit-fringe-size) +magit-fringe-size)) (right (or (cdr-safe +magit-fringe-size) +magit-fringe-size))) (set-window-fringes nil left right))))) (let ((--dolist-tail-- (nreverse '(window-configuration-change-hook)))) (while --dolist-tail-- (let ((hook (car --dolist-tail--))) (let ((--dolist-tail-- (list #'+magit-enlargen-fringe-h))) (while --dolist-tail-- (let ((func (car --dolist-tail--))) (add-hook hook func nil t) (setq --dolist-tail-- (cdr --dolist-tail--))))) (setq --dolist-tail-- (cdr --dolist-tail--))))))) | doom--setq-evil-ex-hl-update-delay-for-magit-mode-h | (closure ((hook . magit-mode-hook) (--dolist-tail--) t) (&rest _) (progn (defalias '+magit-enlargen-fringe-h #'(lambda nil Make fringe larger in magit. (and (display-graphic-p) (derived-mode-p 'magit-mode) +magit-fringe-size (let ((left (or (car-safe +magit-fringe-size) +magit-fringe-size)) (right (or (cdr-safe +magit-fringe-size) +magit-fringe-size))) (set-window-fringes nil left right))))) (let ((--dolist-tail-- (nreverse '(window-configuration-change-hook)))) (while --dolist-tail-- (let ((hook (car --dolist-tail--))) (let ((--dolist-tail-- (list #'+magit-enlargen-fringe-h))) (while --dolist-tail-- (let ((func (car --dolist-tail--))) (add-hook hook func nil t) (setq --dolist-tail-- (cdr --dolist-tail--))))) (setq --dolist-tail-- (cdr --dolist-tail--))))))) | doom-modeline-set-vcs-modeline | +modeline-hide-in-non-status-buffer-h | magit-delta-mode | turn-on-magit-gitflow |

#+begin_src elisp
(use-package evil
  :custom
  (evil-toggle-key "C-v"))
(map! "C-z" #'undo)
#+end_src

#+RESULTS:

- Make escape quit (instead of triple escape)
- Make home and end relative to single lines
- Normalize meta shift on MAC
#+begin_src elisp
(map! "<escape>" #'keyboard-escape-quit)
(map! "<home>" #'beginning-of-line)
(map! "<end>" #'end-of-line)
(map! :when IS-MAC :i "<M-S-right>" "<C-S-right>")
(map! :when IS-MAC :i "<M-S-left>" "<C-S-left>")
(map! "C-/" #'comment-line)
#+end_src

#+RESULTS:

Size the frame to be proportional to the display.
The default proportion is 0.8 of width and height.
The first parameter of workarea is simultaneously the display's offset from the left and padding from the window manager.
Therefore, if the number is too high (like 1920), treat it as 0 for calculating frame width but use it to position correctly.
#+begin_src elisp
(defun set-ideal-frame-size (&optional proportion)
  (interactive)
  (when (display-graphic-p)
    (pcase (frame-monitor-workarea)
      (`(,display-x ,display-y ,display-raw-width ,display-raw-height)
       (let* ((proportion (or proportion 0.9))
              (margin (/ (- 1 proportion) 2))
              (display-width (- display-raw-width (if (< display-x 1920) display-x 0)))
              (display-height (- display-raw-height display-y))
              (width (truncate (* display-width proportion)))
              (height (truncate (* display-height proportion)))
              (margin-left (+ display-x (truncate (* display-width margin))))
              (margin-top (+ display-y (truncate (* display-height margin)))))
         (set-frame-position (selected-frame) margin-left margin-top)
         (set-frame-size (selected-frame) width height t))))))
(set-ideal-frame-size)
(map! :leader
      :desc "Set ideal frame size" "F" #'set-ideal-frame-size)
#+end_src

#+RESULTS:
: set-ideal-frame-size
